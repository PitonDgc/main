import ccxt
import pandas as pd
import requests
import time
from ta.momentum import RSIIndicator, StochasticOscillator
from ta.trend import MACD, EMAIndicator, SMAIndicator
from ta.volatility import AverageTrueRange
from ta.volume import VolumeWeightedAveragePrice
from concurrent.futures import ThreadPoolExecutor

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram
BOT_TOKEN = '7004223241:AAHWLchHx1-x08u95K3YMtYiO0VqFa6Rumo'
CHAT_ID = '363535031'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∞–ª–∏–∑–∞
SYMBOLS = [
    'BTC/USDT', 'ETH/USDT', 'XRP/USDT', 'LTC/USDT', 
    'BLUR/USDT', 'NEAR/USDT', 'WIF/USDT', 'ENA/USDT',
    'AAVE/USDT', 'SOL/USDT', 'SUI/USDT', 'LINK/USDT',
    'AVAX/USDT', 'INJ/USDT', 'DOT/USDT'
]
TIMEFRAME = '5m'  # –¢–∞–π–º—Ñ—Ä–µ–π–º 5 –º–∏–Ω—É—Ç
RSI_OVERSOLD = 30
RSI_OVERBOUGHT = 70
INTERVAL = 300  # –ò–Ω—Ç–µ—Ä–≤–∞–ª ___ –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

exchange = ccxt.binance({
    'options': {'defaultType': 'future'},
    'enableRateLimit': True,
    'rateLimit': 3000  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤
})

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
last_signals = {symbol: None for symbol in SYMBOLS}

def send_telegram_message(message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    payload = {
        'chat_id': CHAT_ID,
        'text': message,
        'parse_mode': 'Markdown'
    }
    try:
        response = requests.post(url, data=payload)
        if response.status_code != 200:
            print(f"–û—à–∏–±–∫–∞ Telegram: {response.text}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")

def get_ohlcv(symbol):
    """–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ"""
    try:
        ohlcv = exchange.fetch_ohlcv(symbol, TIMEFRAME, limit=200)
        df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
        return symbol, df
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö {symbol}: {e}")
        time.sleep(5)  # –ü–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        return symbol, None

def get_btc_dominance():
    """–ü–æ–ª—É—á–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–æ–º–∏–Ω–∞—Ü–∏–∏ –±–∏—Ç–∫–æ–∏–Ω–∞ (BTC.D) –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–≤–µ—á–µ–π"""
    try:
        ohlcv = exchange.fetch_ohlcv('BTCUSDT', TIMEFRAME, limit=6)
        df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
        dominance_change = (df['close'].iloc[-1] - df['close'].iloc[0]) / df['close'].iloc[0] * 100
        return dominance_change
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è BTC.D: {e}")
        return 0

def analyze_data(df):
    """–ê–Ω–∞–ª–∏–∑ —Å –≥–ª–∞–≤–Ω—ã–º —É—Å–ª–æ–≤–∏–µ–º MA30 –∏ —Ä–∞—Å—á–µ—Ç —à–∞–Ω—Å–∞ —É—Å–ø–µ—Ö–∞"""
    if df is None or len(df) < 100:
        return None, 0, 0

    df['rsi'] = RSIIndicator(df['close'], window=14).rsi()
    df['macd'] = MACD(df['close']).macd()
    df['macd_signal'] = MACD(df['close']).macd_signal()
    df['stoch_k'] = StochasticOscillator(df['high'], df['low'], df['close'], window=14).stoch()
    df['stoch_d'] = df['stoch_k'].rolling(3).mean()
    df['atr'] = AverageTrueRange(df['high'], df['low'], df['close'], window=14).average_true_range()
    df['ema50'] = EMAIndicator(df['close'], window=50).ema_indicator()
    df['ema200'] = EMAIndicator(df['close'], window=200).ema_indicator()
    df['vwap'] = VolumeWeightedAveragePrice(df['high'], df['low'], df['close'], df['volume'], window=20).volume_weighted_average_price()
    df['ma30'] = SMAIndicator(df['close'], window=30).sma_indicator()
    
    last = df.iloc[-1]
    signals = []
    success_score = 0
    open_price = last['close']

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è: –º–∏–Ω–∏–º—É–º 4 –∏–∑ 6 —Å–≤–µ—á–µ–π –≤ –æ–¥–Ω—É —Å—Ç–æ—Ä–æ–Ω—É (30 –º–∏–Ω—É—Ç)
    last_six_candles = df['close'].iloc[-7:-1]
    candle_diffs = last_six_candles.diff().dropna()
    is_uptrend = sum(candle_diffs > 0) >= 4
    is_downtrend = sum(candle_diffs < 0) >= 4

    # –£—Å–ª–æ–≤–∏—è
    long_conditions = [
        last['ema50'] > last['ema200'],
        last['rsi'] < RSI_OVERSOLD,
        last['macd'] > last['macd_signal'],
        last['stoch_k'] < 20,
        last['close'] > last['vwap'],
        last['volume'] > df['volume'].rolling(20).mean().iloc[-1]
    ]
    short_conditions = [
        last['ema50'] < last['ema200'],
        last['rsi'] > RSI_OVERBOUGHT,
        last['macd'] < last['macd_signal'],
        last['stoch_k'] > 80,
        last['close'] < last['vwap'],
        last['volume'] > df['volume'].rolling(20).mean().iloc[-1]
    ]

    avg_volume = df['volume'].rolling(20).mean().iloc[-1]
    volume_ratio = last['volume'] / avg_volume if avg_volume > 0 else 1
    btc_dominance_change = get_btc_dominance()

    # –õ–æ–Ω–≥: MA30 –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞, –ø–ª—é—Å 5/6 –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
    if last['close'] > last['ma30'] and sum(long_conditions) >= 5:
        signal = f"üü¢ –õ–û–ù–ì (–£—Å–ª–æ–≤–∏–π: {sum(long_conditions) + 1}/7)"
        signals.append(signal)
        success_score = 50  # –ë–∞–∑–æ–≤—ã–π —à–∞–Ω—Å –∑–∞ 6/7
        if sum(long_conditions) == 6:  # –í—Å–µ 6 —É—Å–ª–æ–≤–∏–π
            success_score += 20
        else:  # 5 —É—Å–ª–æ–≤–∏–π
            success_score += 10
        if volume_ratio > 3:
            success_score += 15
        elif volume_ratio > 2:
            success_score += 10
        elif volume_ratio > 1.5:
            success_score += 5
        if is_uptrend:
            success_score += 10
        if btc_dominance_change < 0:
            success_score += 5
        elif btc_dominance_change > 0:
            success_score -= 5
    
    # –®–æ—Ä—Ç: MA30 –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞, –ø–ª—é—Å 5/6 –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
    if last['close'] < last['ma30'] and sum(short_conditions) >= 5:
        signal = f"üî¥ –®–û–†–¢ (–£—Å–ª–æ–≤–∏–π: {sum(short_conditions) + 1}/7)"
        signals.append(signal)
        success_score = 50  # –ë–∞–∑–æ–≤—ã–π —à–∞–Ω—Å –∑–∞ 6/7
        if sum(short_conditions) == 6:  # –í—Å–µ 6 —É—Å–ª–æ–≤–∏–π
            success_score += 20
        else:  # 5 —É—Å–ª–æ–≤–∏–π
            success_score += 10
        if volume_ratio > 3:
            success_score += 15
        elif volume_ratio > 2:
            success_score += 10
        elif volume_ratio > 1.5:
            success_score += 5
        if is_downtrend:
            success_score += 10
        if btc_dominance_change > 0:
            success_score += 5
        elif btc_dominance_change < 0:
            success_score -= 5
    
    return signals, min(success_score, 100), open_price

def process_symbol(symbol):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–π –ø–∞—Ä—ã"""
    symbol, df = get_ohlcv(symbol)
    signals, success_score, open_price = analyze_data(df)
    return symbol, df, signals, success_score, open_price

def main():
    while True:
        try:
            print(f"üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ {pd.Timestamp.now().strftime('%Y-%m-%d %H:%M:%S')}")
            
            with ThreadPoolExecutor(max_workers=15) as executor:
                results = list(executor.map(process_symbol, SYMBOLS))
            
            all_signals = []
            for symbol, df, signals, success_score, open_price in results:
                if df is not None:
                    print(f"\n{symbol}:")
                    print(f"  –¶–µ–Ω–∞: {df['close'].iloc[-1]:.2f}")
                    print(f"  EMA50/200: {df['ema50'].iloc[-1]:.2f}/{df['ema200'].iloc[-1]:.2f}")
                    print(f"  MA30: {df['ma30'].iloc[-1]:.2f}")
                    print(f"  RSI: {df['rsi'].iloc[-1]:.1f} | MACD: {df['macd'].iloc[-1]:.2f}")
                    print(f"  –û–±—ä–µ–º: {df['volume'].iloc[-1]:.0f} (–°—Ä–µ–¥–Ω–∏–π: {df['volume'].rolling(20).mean().iloc[-1]:.0f})")
                    if signals:
                        for signal in signals:
                            print(f"  ‚Üí {signal} (–®–∞–Ω—Å —É—Å–ø–µ—Ö–∞: {success_score:.0f}%)")
                            all_signals.append((symbol, signal, success_score, open_price))
                    else:
                        print("  –ù–µ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤")
                else:
                    print(f"\n{symbol}: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")

            if all_signals:
                best_symbol, best_signal, best_score, best_open_price = max(all_signals, key=lambda x: x[2])
                if last_signals[best_symbol] != best_signal:
                    send_telegram_message(
                        f"*{best_symbol}* ‚Üí {best_signal}\n"
                        f"–¶–µ–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è: {best_open_price:.2f}\n"
                        f"–®–∞–Ω—Å —É—Å–ø–µ—Ö–∞: {best_score:.0f}%"
                    )
                    last_signals[best_symbol] = best_signal
                    print(f"\n–õ—É—á—à–∏–π —Å–∏–≥–Ω–∞–ª: {best_symbol} ‚Üí {best_signal} (–®–∞–Ω—Å —É—Å–ø–µ—Ö–∞: {best_score:.0f}%)")
            
            print(f"–û–∂–∏–¥–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ ({INTERVAL // 60} –º–∏–Ω)...")
            time.sleep(INTERVAL)
        
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
            time.sleep(60)  # –ü–∞—É–∑–∞ 1 –º–∏–Ω—É—Ç–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ

if __name__ == "__main__":
    main()